// Mocks generated by Mockito 5.4.6 from annotations
// in photo_gallery_flutter_task/test/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:photo_gallery_flutter_task/features/photo_list/data/model/photo_model/photo.dart'
    as _i5;
import 'package:photo_gallery_flutter_task/features/photo_list/data/model/photo_model/photo_model.dart'
    as _i2;
import 'package:photo_gallery_flutter_task/features/photo_list/domain/repositories/photo_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhotoModel_0 extends _i1.SmartFake implements _i2.PhotoModel {
  _FakePhotoModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i3.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PhotoModel> fetchPhotos({int? page = 1, int? perPage = 40}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPhotos, [], {
              #page: page,
              #perPage: perPage,
            }),
            returnValue: _i4.Future<_i2.PhotoModel>.value(
              _FakePhotoModel_0(
                this,
                Invocation.method(#fetchPhotos, [], {
                  #page: page,
                  #perPage: perPage,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.PhotoModel>);

  @override
  _i4.Future<void> cachePhotos(List<_i5.Photo>? photos) =>
      (super.noSuchMethod(
            Invocation.method(#cachePhotos, [photos]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i5.Photo> getCachedPhotos() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedPhotos, []),
            returnValue: <_i5.Photo>[],
          )
          as List<_i5.Photo>);
}
